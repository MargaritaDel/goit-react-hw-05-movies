{"version":3,"file":"static/js/631.2ed012ad.chunk.js","mappings":"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","sources":["components/Error.js","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.js","services/FetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Error = styled.div`\n  margin-top: 10px;\n  text-align: center;\n`;","import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor = '#c0efff'\n        color = '#e15b64'\n        wrapperStyle={{\n            display: 'block',\n            marginTop: 20,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n    );\n}","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const LinkButton = styled(Link)`\n  display: flex;\n  width: 300px;\n  height: 100px:\n  align-items: center;\n  font-size: 20px;\n  border: 1px solid #0d57aa;\n  border-radius: 6px;\n  margin-bottom: 8px;\n  text-align: center;\n  background-color: #b5d1f2;\n  transition: color 0.2s ease-in-out, background-color 0.2s ease-in-out;\n  &:hover,\n  &:focus {\n    background-color: yellow;\n    color: blue;\n\n`;\n\nexport const MovieInformation = styled.div`\n  @media screen and (min-width: 980px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n  }\n`;\n\nexport const MovieImg = styled.img`\n  width: 300px;\n`;\n\nexport const MovieInformationText = styled.div`\n  @media screen and (min-width: 980px) {\n    width: calc(100% - 300px - 20px);\n  }\n`;\n\nexport const GenresList = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  gap: 12px;\n`;\n\nexport const MovieMoreInformation = styled.div`\n  margin: 0 -20px;\n  padding: 5px 20px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 9px 9px -6px,\n    rgb(0 0 0 / 14%) 0px 9px 12px 0px, rgb(0 0 0 / 12%) 0px 3px 24px 0px;\n`;","import {Loader} from 'components/Loader/Loader';\nimport { Error } from 'components/Error';\nimport { Suspense, useRef } from 'react';\nimport { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovie } from 'services/FetchApi';\nimport {\n  GenresList,\n  LinkButton,\n  MovieImg,\n  MovieInformation,\n  MovieInformationText,\n  MovieMoreInformation,\n} from './MovieDetails.styled';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport { GiTargetPoster } from 'react-icons/gi';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? `/movies`);\n\n  useEffect(() => {\n    async function uploadMovie(movieId) {\n      setIsLoading(true);\n      try {\n        const movie = await fetchMovie(movieId);\n        if (!movie) {\n          throw new Error('No data');\n        } else {\n          setMovie(movie);\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    uploadMovie(movieId);\n  }, [movieId]);\n\n  const {\n    original_title,\n    release_date,\n    poster_path,\n    vote_average,\n    overview,\n    genres,\n  } = movie;\n  const year = new Date(release_date).getFullYear();\n  const userScore = Math.round(vote_average * 10);\n\n  return (\n    <>\n      <LinkButton to={backLinkLocation.current}>\n        <TiArrowBackOutline />\n        Go back\n      </LinkButton>\n      {isLoading && <Loader />}\n      {error && <Error>{error} There are not movies</Error>}\n      <MovieInformation>\n        {poster_path ? (\n          <MovieImg\n            src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n            alt={original_title}\n            width=\"300\"\n          />\n        ) : (\n          <GiTargetPoster\n            style={{ display: 'block', width: '300px' }}\n            color=\"rgb(60 80 60 )\"\n            size={500}\n          />\n        )}\n        <MovieInformationText>\n          <h1>\n            {original_title} ({year})\n          </h1>\n          <p>User score: {userScore}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <GenresList>\n            {genres && genres.map(({ name, id }) => <li key={id}>{name}</li>)}\n          </GenresList>\n        </MovieInformationText>\n      </MovieInformation>\n      <MovieMoreInformation>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"review\">Review</Link>\n          </li>\n        </ul>\n      </MovieMoreInformation>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;","import axios from 'axios';\n\nconst API_KEY = 'c706b9e49acca8149f8445498f846084';\nconst API_PATH = 'https://api.themoviedb.org/3';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\nconst LANGUAGE = 'en-US';\n\n\nexport async function fetchTrendMovies() {\n  const response = await axios.get(\n    `${API_PATH}/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchSearch(searchQuery) {\n  const response = await axios.get(\n    `${API_PATH}/search/movie?api_key=${API_KEY}&language=${LANGUAGE}&query=${searchQuery}&page=1&include_adult=false`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchMovie(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchReview(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${LANGUAGE}&page=1`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchCast(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}"],"names":["Error","styled","Loader","visible","height","width","ariaLabel","wrapperClass","glassColor","color","wrapperStyle","display","marginTop","marginLeft","marginRight","LinkButton","Link","MovieInformation","MovieImg","MovieInformationText","GenresList","MovieMoreInformation","movieId","useParams","useState","movie","setMovie","isLoading","setIsLoading","error","setError","location","useLocation","backLinkLocation","useRef","state","from","useEffect","fetchMovie","message","uploadMovie","original_title","release_date","poster_path","vote_average","overview","genres","year","Date","getFullYear","userScore","Math","round","to","current","src","alt","style","size","map","name","id","Suspense","API_KEY","API_PATH","MEDIA_TYPE","TIME_WINDOW","LANGUAGE","fetchTrendMovies","axios","response","statusText","data","fetchSearch","searchQuery","fetchReview","fetchCast"],"sourceRoot":""}