{"version":3,"file":"static/js/266.45b871e1.chunk.js","mappings":"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","sources":["components/Error.js","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/Home.js","services/FetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Error = styled.div`\n  margin-top: 10px;\n  text-align: center;\n`;","import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor = '#c0efff'\n        color = '#e15b64'\n        wrapperStyle={{\n            display: 'block',\n            marginTop: 20,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n    );\n}","import styled from 'styled-components';\n\nexport const MovieItem = styled.li`\npadding: 7px 20px;\nmax-width: 700px;\nborder-radius: 8px;\nbox-shadow: 2px 1px 9px 0px #000000;\ntransition: all 250ms linear;\ntext-decoration-line: none;\nlist-style-type: none; \nmargin-bottom:10px;\n&:hover,\n&:focus {\n  background-color: yellow;\n  color: blue;\n  transform: scale(1.01);\n  font-size: 16px;\n  font-weight: 500;\n}\n\n`;","import { Link, useLocation } from 'react-router-dom';\nimport { MovieItem } from './MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <MovieItem key={id}>\n          <Link state={{ from: location }} to={`/movies/${id}`}>\n            {title}\n          </Link>\n        </MovieItem>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;","import {Loader }from 'components/Loader/Loader';\nimport { Error } from 'components/Error';\nimport { useEffect, useState } from 'react';\nimport { fetchTrendMovies } from 'services/FetchApi';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const [trendMovies, setTrendMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function uploadTrends() {\n      setIsLoading(true);\n      try {\n        const trends = await fetchTrendMovies();\n\n        if (!trends.total_results) {\n          throw new Error('Sorry, there are no trending movies at the moment. Please, try later');\n        } else {\n          setTrendMovies(trends.results);\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    uploadTrends();\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      {isLoading && <Loader />}\n      {error && <Error>{error} There are not movies</Error>}\n      <MoviesList movies={trendMovies} />\n    </>\n  );\n};\n\nexport default Home;","import axios from 'axios';\n\nconst API_KEY = 'c706b9e49acca8149f8445498f846084';\nconst API_PATH = 'https://api.themoviedb.org/3';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\nconst LANGUAGE = 'en-US';\n\n\nexport async function fetchTrendMovies() {\n  const response = await axios.get(\n    `${API_PATH}/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchSearch(searchQuery) {\n  const response = await axios.get(\n    `${API_PATH}/search/movie?api_key=${API_KEY}&language=${LANGUAGE}&query=${searchQuery}&page=1&include_adult=false`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchMovie(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchReview(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${LANGUAGE}&page=1`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchCast(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}"],"names":["Error","styled","Loader","visible","height","width","ariaLabel","wrapperClass","glassColor","color","wrapperStyle","display","marginTop","marginLeft","marginRight","MovieItem","movies","location","useLocation","map","id","title","state","from","to","useState","trendMovies","setTrendMovies","isLoading","setIsLoading","error","setError","useEffect","fetchTrendMovies","trends","total_results","results","message","uploadTrends","API_KEY","API_PATH","MEDIA_TYPE","TIME_WINDOW","LANGUAGE","axios","response","statusText","data","fetchSearch","searchQuery","fetchMovie","movieId","fetchReview","fetchCast"],"sourceRoot":""}