{"version":3,"file":"static/js/806.483f1f54.chunk.js","mappings":"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","sources":["components/Error.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","services/FetchApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Error = styled.div`\n  margin-top: 10px;\n  text-align: center;\n`;","import { MagnifyingGlass } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <MagnifyingGlass\n        visible={true}\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperClass=\"MagnifyingGlass-wrapper\"\n        glassColor = '#c0efff'\n        color = '#e15b64'\n        wrapperStyle={{\n            display: 'block',\n            marginTop: 20,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n    );\n}","import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  flex-wrap: wrap;\n  list-style: none;\n`;\n\nexport const ReviewListItem = styled.li`\n  padding-bottom: 10px;\n  border-bottom: 1px solid grey;\n  border-radius: 8px;\n  box-shadow: 2px 1px 9px 0px #000000;\n`;\n\nexport const Author = styled.h4`\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 500;\n  align-items: center;\n  text-align: center;\n`;\n\n","import {Loader} from 'components/Loader/Loader';\nimport { Error } from 'components/Error';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReview } from 'services/FetchApi';\nimport { ReviewList, ReviewListItem, Author} from '../Reviews/Reviews.styled'\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function uploadReview(movieId) {\n      setIsLoading(true);\n      try {\n        const data = await fetchReview(movieId);\n        const reviews = data.results;\n        if (!reviews.length) {\n          throw new Error(`We don't have any reviews for this movie.`);\n        } else {\n          setReviews(reviews);\n        }\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    uploadReview(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <Error>{error} There are not movies</Error>}\n      <ReviewList>\n        {reviews.map(({ id, author, content }) => (\n          <ReviewListItem key={id}>\n            <Author>{author}</Author>\n            <p>{content}</p>\n          </ReviewListItem>\n        ))}\n      </ReviewList>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'c706b9e49acca8149f8445498f846084';\nconst API_PATH = 'https://api.themoviedb.org/3';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\nconst LANGUAGE = 'en-US';\n\n\nexport async function fetchTrendMovies() {\n  const response = await axios.get(\n    `${API_PATH}/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchSearch(searchQuery) {\n  const response = await axios.get(\n    `${API_PATH}/search/movie?api_key=${API_KEY}&language=${LANGUAGE}&query=${searchQuery}&page=1&include_adult=false`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchMovie(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchReview(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}/reviews?api_key=${API_KEY}&language=${LANGUAGE}&page=1`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport async function fetchCast(movieId) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movieId}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}"],"names":["Error","styled","Loader","visible","height","width","ariaLabel","wrapperClass","glassColor","color","wrapperStyle","display","marginTop","marginLeft","marginRight","ReviewList","ReviewListItem","Author","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useEffect","fetchReview","data","results","length","message","uploadReview","map","id","author","content","API_KEY","API_PATH","MEDIA_TYPE","TIME_WINDOW","LANGUAGE","fetchTrendMovies","axios","response","statusText","fetchSearch","searchQuery","fetchMovie","fetchCast"],"sourceRoot":""}